// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/12/2023 14:28:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    trippleAdder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module trippleAdder_vlg_sample_tst(
	c0,
	x0,
	x1,
	x2,
	y0,
	y1,
	y2,
	sampler_tx
);
input  c0;
input  x0;
input  x1;
input  x2;
input  y0;
input  y1;
input  y2;
output sampler_tx;

reg sample;
time current_time;
always @(c0 or x0 or x1 or x2 or y0 or y1 or y2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module trippleAdder_vlg_check_tst (
	Cout,
	s0,
	s1,
	s2,
	sampler_rx
);
input  Cout;
input  s0;
input  s1;
input  s2;
input sampler_rx;

reg  Cout_expected;
reg  s0_expected;
reg  s1_expected;
reg  s2_expected;

reg  Cout_prev;
reg  s0_prev;
reg  s1_prev;
reg  s2_prev;

reg  Cout_expected_prev;
reg  s0_expected_prev;
reg  s1_expected_prev;
reg  s2_expected_prev;

reg  last_Cout_exp;
reg  last_s0_exp;
reg  last_s1_exp;
reg  last_s2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	s0_prev = s0;
	s1_prev = s1;
	s2_prev = s2;
end

// update expected /o prevs

always @(trigger)
begin
	Cout_expected_prev = Cout_expected;
	s0_expected_prev = s0_expected;
	s1_expected_prev = s1_expected;
	s2_expected_prev = s2_expected;
end



// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 

// expected s0
initial
begin
	s0_expected = 1'bX;
end 

// expected s1
initial
begin
	s1_expected = 1'bX;
end 

// expected s2
initial
begin
	s2_expected = 1'bX;
end 
// generate trigger
always @(Cout_expected or Cout or s0_expected or s0 or s1_expected or s1 or s2_expected or s2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected s0 = %b | expected s1 = %b | expected s2 = %b | ",Cout_expected_prev,s0_expected_prev,s1_expected_prev,s2_expected_prev);
	$display("| real Cout = %b | real s0 = %b | real s1 = %b | real s2 = %b | ",Cout_prev,s0_prev,s1_prev,s2_prev);
`endif
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( s0_expected_prev !== 1'bx ) && ( s0_prev !== s0_expected_prev )
		&& ((s0_expected_prev !== last_s0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s0_expected_prev);
		$display ("     Real value = %b", s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s0_exp = s0_expected_prev;
	end
	if (
		( s1_expected_prev !== 1'bx ) && ( s1_prev !== s1_expected_prev )
		&& ((s1_expected_prev !== last_s1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s1_exp = s1_expected_prev;
	end
	if (
		( s2_expected_prev !== 1'bx ) && ( s2_prev !== s2_expected_prev )
		&& ((s2_expected_prev !== last_s2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s2_exp = s2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module trippleAdder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c0;
reg x0;
reg x1;
reg x2;
reg y0;
reg y1;
reg y2;
// wires                                               
wire Cout;
wire s0;
wire s1;
wire s2;

wire sampler;                             

// assign statements (if any)                          
trippleAdder i1 (
// port map - connection between master ports and signals/registers   
	.c0(c0),
	.Cout(Cout),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.y0(y0),
	.y1(y1),
	.y2(y2)
);

// c0
initial
begin
	c0 = 1'b0;
end 

// x0
always
begin
	x0 = 1'b0;
	x0 = #10000 1'b1;
	#10000;
end 

// x1
always
begin
	x1 = 1'b0;
	x1 = #20000 1'b1;
	#20000;
end 

// x2
initial
begin
	x2 = 1'b0;
	x2 = #20000 1'b1;
	x2 = #15000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #10000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #10000 1'b0;
	x2 = #10000 1'b1;
	x2 = #5000 1'b0;
	x2 = #15000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #10000 1'b0;
	x2 = #5000 1'b1;
	x2 = #10000 1'b0;
	x2 = #20000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #10000 1'b0;
	x2 = #5000 1'b1;
	x2 = #10000 1'b0;
	x2 = #15000 1'b1;
	x2 = #5000 1'b0;
	x2 = #10000 1'b1;
	x2 = #10000 1'b0;
	x2 = #20000 1'b1;
	x2 = #25000 1'b0;
	x2 = #5000 1'b1;
	x2 = #15000 1'b0;
	x2 = #10000 1'b1;
	x2 = #10000 1'b0;
	x2 = #15000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #15000 1'b0;
	x2 = #5000 1'b1;
	x2 = #10000 1'b0;
	x2 = #20000 1'b1;
	x2 = #10000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #10000 1'b0;
	x2 = #10000 1'b1;
	x2 = #10000 1'b0;
	x2 = #15000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #10000 1'b1;
	x2 = #15000 1'b0;
	x2 = #10000 1'b1;
	x2 = #10000 1'b0;
	x2 = #5000 1'b1;
	x2 = #15000 1'b0;
	x2 = #5000 1'b1;
	x2 = #20000 1'b0;
	x2 = #10000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #15000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #10000 1'b1;
	x2 = #20000 1'b0;
	x2 = #20000 1'b1;
	x2 = #30000 1'b0;
	x2 = #10000 1'b1;
	x2 = #10000 1'b0;
	x2 = #5000 1'b1;
	x2 = #10000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #10000 1'b1;
	x2 = #15000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #20000 1'b1;
	x2 = #5000 1'b0;
	x2 = #15000 1'b1;
	x2 = #5000 1'b0;
	x2 = #40000 1'b1;
	x2 = #5000 1'b0;
	x2 = #5000 1'b1;
	x2 = #5000 1'b0;
	x2 = #10000 1'b1;
	x2 = #10000 1'b0;
	x2 = #25000 1'b1;
	x2 = #15000 1'b0;
	x2 = #15000 1'b1;
end 

// y0
initial
begin
	y0 = 1'b1;
	y0 = #10000 1'b0;
	y0 = #5000 1'b1;
	y0 = #5000 1'b0;
	y0 = #5000 1'b1;
	y0 = #5000 1'b0;
	y0 = #5000 1'b1;
	y0 = #10000 1'b0;
	y0 = #15000 1'b1;
	y0 = #10000 1'b0;
	y0 = #10000 1'b1;
	y0 = #5000 1'b0;
	y0 = #5000 1'b1;
	y0 = #25000 1'b0;
	y0 = #5000 1'b1;
	y0 = #20000 1'b0;
	y0 = #10000 1'b1;
	y0 = #5000 1'b0;
	y0 = #15000 1'b1;
	y0 = #15000 1'b0;
	y0 = #10000 1'b1;
	y0 = #5000 1'b0;
	y0 = #20000 1'b1;
	y0 = #15000 1'b0;
	y0 = #10000 1'b1;
	y0 = #10000 1'b0;
	y0 = #5000 1'b1;
	y0 = #15000 1'b0;
	y0 = #10000 1'b1;
	y0 = #10000 1'b0;
	y0 = #15000 1'b1;
	y0 = #5000 1'b0;
	y0 = #15000 1'b1;
	y0 = #20000 1'b0;
	y0 = #10000 1'b1;
	y0 = #20000 1'b0;
	y0 = #15000 1'b1;
	y0 = #5000 1'b0;
	y0 = #10000 1'b1;
	y0 = #10000 1'b0;
	y0 = #15000 1'b1;
	y0 = #5000 1'b0;
	y0 = #20000 1'b1;
	y0 = #5000 1'b0;
	y0 = #5000 1'b1;
	y0 = #10000 1'b0;
	y0 = #10000 1'b1;
	y0 = #10000 1'b0;
	y0 = #5000 1'b1;
	y0 = #15000 1'b0;
	y0 = #10000 1'b1;
	y0 = #10000 1'b0;
	y0 = #5000 1'b1;
	y0 = #5000 1'b0;
	y0 = #5000 1'b1;
	y0 = #10000 1'b0;
	y0 = #15000 1'b1;
	y0 = #20000 1'b0;
	y0 = #5000 1'b1;
	y0 = #10000 1'b0;
	y0 = #5000 1'b1;
	y0 = #5000 1'b0;
	y0 = #15000 1'b1;
	y0 = #10000 1'b0;
	y0 = #45000 1'b1;
	y0 = #10000 1'b0;
	y0 = #15000 1'b1;
	y0 = #5000 1'b0;
	y0 = #10000 1'b1;
	y0 = #5000 1'b0;
	y0 = #5000 1'b1;
	y0 = #5000 1'b0;
	y0 = #15000 1'b1;
	y0 = #15000 1'b0;
	y0 = #5000 1'b1;
	y0 = #20000 1'b0;
	y0 = #15000 1'b1;
	y0 = #25000 1'b0;
	y0 = #5000 1'b1;
	y0 = #5000 1'b0;
	y0 = #10000 1'b1;
	y0 = #5000 1'b0;
	y0 = #10000 1'b1;
	y0 = #5000 1'b0;
	y0 = #15000 1'b1;
	y0 = #15000 1'b0;
	y0 = #20000 1'b1;
	y0 = #15000 1'b0;
	y0 = #20000 1'b1;
	y0 = #5000 1'b0;
	y0 = #5000 1'b1;
	y0 = #5000 1'b0;
	y0 = #5000 1'b1;
end 

// y1
initial
begin
	y1 = 1'b0;
	y1 = #5000 1'b1;
	y1 = #10000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #10000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #15000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #30000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #15000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #15000 1'b0;
	y1 = #10000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #10000 1'b0;
	y1 = #5000 1'b1;
	y1 = #10000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #10000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #25000 1'b0;
	y1 = #35000 1'b1;
	y1 = #10000 1'b0;
	y1 = #15000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #30000 1'b1;
	y1 = #10000 1'b0;
	y1 = #5000 1'b1;
	y1 = #30000 1'b0;
	y1 = #10000 1'b1;
	y1 = #5000 1'b0;
	y1 = #10000 1'b1;
	y1 = #5000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #15000 1'b1;
	y1 = #20000 1'b0;
	y1 = #5000 1'b1;
	y1 = #25000 1'b0;
	y1 = #5000 1'b1;
	y1 = #15000 1'b0;
	y1 = #15000 1'b1;
	y1 = #10000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #5000 1'b1;
	y1 = #15000 1'b0;
	y1 = #35000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #15000 1'b0;
	y1 = #10000 1'b1;
	y1 = #10000 1'b0;
	y1 = #15000 1'b1;
	y1 = #5000 1'b0;
	y1 = #10000 1'b1;
	y1 = #5000 1'b0;
	y1 = #25000 1'b1;
	y1 = #30000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #5000 1'b1;
	y1 = #15000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #15000 1'b1;
	y1 = #5000 1'b0;
	y1 = #15000 1'b1;
	y1 = #5000 1'b0;
	y1 = #15000 1'b1;
	y1 = #10000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
	y1 = #10000 1'b1;
	y1 = #25000 1'b0;
	y1 = #5000 1'b1;
	y1 = #5000 1'b0;
end 

// y2
initial
begin
	y2 = 1'b0;
	y2 = #10000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #35000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #15000 1'b0;
	y2 = #10000 1'b1;
	y2 = #5000 1'b0;
	y2 = #20000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #10000 1'b0;
	y2 = #5000 1'b1;
	y2 = #10000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #10000 1'b0;
	y2 = #10000 1'b1;
	y2 = #25000 1'b0;
	y2 = #35000 1'b1;
	y2 = #15000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #40000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #10000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #10000 1'b0;
	y2 = #5000 1'b1;
	y2 = #10000 1'b0;
	y2 = #5000 1'b1;
	y2 = #25000 1'b0;
	y2 = #10000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #5000 1'b0;
	y2 = #15000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #10000 1'b0;
	y2 = #10000 1'b1;
	y2 = #5000 1'b0;
	y2 = #25000 1'b1;
	y2 = #35000 1'b0;
	y2 = #10000 1'b1;
	y2 = #20000 1'b0;
	y2 = #20000 1'b1;
	y2 = #15000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #5000 1'b0;
	y2 = #5000 1'b1;
	y2 = #15000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #15000 1'b1;
	y2 = #5000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #5000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #15000 1'b1;
	y2 = #5000 1'b0;
	y2 = #5000 1'b1;
	y2 = #20000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #10000 1'b1;
	y2 = #10000 1'b0;
	y2 = #5000 1'b1;
	y2 = #5000 1'b0;
	y2 = #5000 1'b1;
	y2 = #10000 1'b0;
	y2 = #10000 1'b1;
	y2 = #15000 1'b0;
	y2 = #10000 1'b1;
	y2 = #15000 1'b0;
	y2 = #15000 1'b1;
	y2 = #10000 1'b0;
	y2 = #5000 1'b1;
end 

trippleAdder_vlg_sample_tst tb_sample (
	.c0(c0),
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.sampler_tx(sampler)
);

trippleAdder_vlg_check_tst tb_out(
	.Cout(Cout),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.sampler_rx(sampler)
);
endmodule

